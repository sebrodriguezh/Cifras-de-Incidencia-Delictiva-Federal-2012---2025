#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para homologar nombres de grupos criminales en el CSV
Consolida variaciones de nombres en un nombre est√°ndar
"""

import pandas as pd
import json
from pathlib import Path

def homologar_grupos_criminales():
    """Homologa nombres de grupos criminales en el CSV"""
    
    try:
        print("üîÑ Homologando nombres de grupos criminales...")
        
        # Leer el CSV
        csv_file = Path('data/gabinete_detenidos_final.csv')
        df = pd.read_csv(csv_file, encoding='utf-8')
        print(f"‚úÖ CSV le√≠do: {len(df)} filas")
        
        # Diccionario de homologaciones
        homologaciones = {
            # Consolidar variaciones de Los Mayos
            'Los Mayos': 'C√°rtel del Pac√≠fico (Los Mayos)',
            'C√°rtel del Pac√≠fico (Los Menores)': 'C√°rtel del Pac√≠fico (Los Chapitos)',
            'Los Chapitos': 'C√°rtel del Pac√≠fico (Los Chapitos)',
            'C√°rtel de Sinaloa (Los Chapitos)': 'C√°rtel del Pac√≠fico (Los Chapitos)'
            
            # Agregar m√°s homologaciones aqu√≠ seg√∫n sea necesario
            # 'Variaci√≥n 1': 'Nombre est√°ndar',
            # 'Variaci√≥n 2': 'Nombre est√°ndar',
        }
        
        # Aplicar homologaciones
        cambios_aplicados = 0
        for variacion, nombre_estandar in homologaciones.items():
            # Contar cu√°ntos registros tienen esta variaci√≥n
            registros_antes = len(df[df['criminal_group'] == variacion])
            if registros_antes > 0:
                print(f"üîÑ Homologando '{variacion}' ‚Üí '{nombre_estandar}' ({registros_antes} registros)")
                df.loc[df['criminal_group'] == variacion, 'criminal_group'] = nombre_estandar
                cambios_aplicados += registros_antes
        
        print(f"‚úÖ Total de cambios aplicados: {cambios_aplicados}")
        
        # Guardar CSV actualizado
        df.to_csv(csv_file, index=False, encoding='utf-8')
        print(f"üíæ CSV actualizado guardado en: {csv_file}")
        
        # Regenerar an√°lisis de grupos criminales
        print("üîÑ Regenerando an√°lisis de grupos criminales...")
        regenerar_analisis_grupos()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error homologando grupos: {e}")
        return False

def regenerar_analisis_grupos():
    """Regenera el an√°lisis de grupos criminales con los nombres homologados"""
    
    try:
        # Leer el CSV actualizado
        csv_file = Path('data/gabinete_detenidos_final.csv')
        df = pd.read_csv(csv_file, encoding='utf-8')
        
        # Filtrar registros con grupo criminal
        df_con_grupo = df[df['criminal_group'].notna() & (df['criminal_group'] != '')]
        
        # Contar grupos √∫nicos
        grupos_count = df_con_grupo['criminal_group'].value_counts()
        
        # Calcular estad√≠sticas
        total_registros = len(df)
        total_con_grupo = len(df_con_grupo)
        total_grupos = len(grupos_count)
        
        # Crear estructura de datos
        grupos_data = []
        for i, (grupo, casos) in enumerate(grupos_count.items(), 1):
            porcentaje = round((casos / total_con_grupo) * 100, 1)
            grupos_data.append({
                'rank': i,
                'grupo': grupo,
                'casos': int(casos),
                'porcentaje': porcentaje
            })
        
        # Crear JSON final
        resultado = {
            'total_grupos': total_grupos,
            'total_casos_con_grupo': total_con_grupo,
            'grupos': grupos_data
        }
        
        # Guardar JSON
        json_file = Path('data/all_criminal_groups.json')
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(resultado, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ An√°lisis actualizado guardado en: {json_file}")
        print(f"üìä Estad√≠sticas actualizadas:")
        print(f"   ‚Ä¢ Total registros: {total_registros}")
        print(f"   ‚Ä¢ Con grupo reportado: {total_con_grupo} ({round((total_con_grupo/total_registros)*100, 1)}%)")
        print(f"   ‚Ä¢ Grupos √∫nicos: {total_grupos}")
        
        # Mostrar top 5
        print(f"\nüìã TOP 5 GRUPOS ACTUALIZADOS:")
        for grupo in grupos_data[:5]:
            print(f"   {grupo['rank']}. {grupo['grupo']}: {grupo['casos']} casos ({grupo['porcentaje']}%)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error regenerando an√°lisis: {e}")
        return False

if __name__ == "__main__":
    homologar_grupos_criminales()
